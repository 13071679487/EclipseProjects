/**
 * 
 */
package com.rifu.service.impl;

import java.io.File;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;

import javax.validation.Valid;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.google.common.collect.Lists;
import com.rifu.common.Constants;
import com.rifu.common.ResponseCode;
import com.rifu.common.ServerResponse;
import com.rifu.dao.CategoryMapper;
import com.rifu.dao.ProductMapper;
import com.rifu.pojo.Category;
import com.rifu.pojo.Product;
import com.rifu.pojo.ProductWithBLOBs;
import com.rifu.pojo.Record;
import com.rifu.service.ICategoryService;
import com.rifu.service.IProductService;
import com.rifu.service.IRecordService;
import com.rifu.util.BigDecimalUtil;
import com.rifu.util.DateTimeUtil;
import com.rifu.util.FTPUtil;
import com.rifu.util.PropertiesUtil;
import com.rifu.vo.ProductDetailVo;
import com.rifu.vo.ProductListVo;

/**
 * @author Lifu
 * @create 2018年6月18日 下午1:13:26
 */

@Service
public class ProductServiceImpl implements IProductService {

	@Autowired
	private ProductMapper productMapper;

	@Autowired
	private CategoryMapper categoryMapper;

	@Autowired
	private ICategoryService iCategoryService;
	
	@Autowired
	private IRecordService iRecordService;
	
	private static final Logger logger=LoggerFactory.getLogger(ProductServiceImpl.class);

	public ServerResponse saveOrUpdate(Integer uid,@Valid ProductWithBLOBs product) {
//		if (uid != product.getBusinessId()) {
//			return ServerResponse.createByError(ResponseCode.NO_AUTHORIZATION.getCode(),
//					ResponseCode.NO_AUTHORIZATION.getDesc());
//		}
		if (product.getProductId() != null) {
			ProductWithBLOBs resultSet = productMapper.selectByPrimaryKey(product.getProductId());
			if (resultSet == null) {
				return ServerResponse.createByErrorWithMessage("no this product");
			}
			resultSet.setUpdateTime(new Date());
			int rowCount = productMapper.updateByPrimaryKeySelective(product);
			if (rowCount > 0) {
				return ServerResponse.createBySuccess();
			} else {
				return ServerResponse.createByError();
			}
		} else {
			String[] subImageArray = product.getSubimages().split(",");
            if(subImageArray.length > 0){
                product.setForeground(subImageArray[0]);
            }
			product.setCreateTime(new Date());
			product.setUpdateTime(new Date());
			int rowCount = productMapper.insertSelective(product);
			if (rowCount > 0) {
				return ServerResponse.createBySuccess(product.getProductId());
			} else {
				return ServerResponse.createByError();
			}
		}
	}

	public ServerResponse setProductSaleStatus(Integer productId, Integer status) {
		ProductWithBLOBs product = productMapper.selectByPrimaryKey(productId);
		if (product == null) {
			return ServerResponse.createByErrorWithMessage("no such product");
		}
		ProductWithBLOBs productForUpdate = new ProductWithBLOBs();
		productForUpdate.setProductId(productId);
		productForUpdate.setProductStatus(status);
		productForUpdate.setUpdateTime(new Date());
		int rowCount = productMapper.updateByPrimaryKeySelective(productForUpdate);
		if (rowCount > 0) {
			return ServerResponse.createBySuccess();
		}
		return ServerResponse.createByError();
	}

	public ServerResponse deleteByProductId(Integer uid, Integer pid) {
		ProductWithBLOBs product = productMapper.selectByPrimaryKey(pid);
		if (product == null) {
			return ServerResponse.createByErrorWithMessage("no this product");
		}
		int rowCount = productMapper.deleteByPrimaryKey(pid);
		if (rowCount > 0) {
			return ServerResponse.createBySuccess();
		}
		return ServerResponse.createByError();
	}

	public ServerResponse getProductDetail(Integer pid) {
		ProductWithBLOBs product = productMapper.selectByPrimaryKey(pid);
		if (product == null) {
			return ServerResponse.createByErrorWithMessage("no this product");
		}
		return ServerResponse.createBySuccess(assembleProductDetailVo(product));
	}

	public ServerResponse getProductDetailByConsumer(Integer userId,Integer pid) {
		ProductWithBLOBs product = productMapper.selectByPrimaryKey(pid);
		if (product == null) {
			return ServerResponse.createByErrorWithMessage("no this product");
		}
		if (product.getProductStatus() != Constants.ProductStatus.ON_SALE.getCode()) {
			return ServerResponse.createByErrorWithMessage("this product has sold out");
		}
		if(userId != null){
			Record record = new Record();
			record.setUserId(userId);
			record.setProductId(pid);
			iRecordService.createRecord(userId, record);
		}
		// TODO return a decorate vo
		return ServerResponse.createBySuccess(assembleProductDetailVo(product));
	}

	public ServerResponse<PageInfo> getProducts(String key, Integer categoryId, Integer pagenum, Integer size,
			String orderby) {
		if (StringUtils.isBlank(key) && categoryId == null) {
			return ServerResponse.createByError(ResponseCode.ILLEGAL_ARG.getCode(), ResponseCode.ILLEGAL_ARG.getDesc());
		}
		List<Integer> cids = new ArrayList<Integer>();
		if (categoryId != null) {
			Category category = categoryMapper.selectByPrimaryKey(categoryId);
			if (categoryId != 0 &&category == null && StringUtils.isBlank(key)) {
				PageHelper.startPage(pagenum, size,true);
				List<ProductListVo> pvos = Lists.newArrayList();
				PageInfo pageInfo = new PageInfo(pvos);
				return ServerResponse.createBySuccess(pageInfo);
			}
			cids = iCategoryService.getAllChildCategory(categoryId).getData();
		}
		if (StringUtils.isNotBlank(key)) {
			key = new StringBuffer().append("%").append(key).append("%").toString();
		} else {
			key = null;
		}
		PageHelper.startPage(pagenum, size,true);
		List<Product> productList = productMapper.selectByKeyAndCategorysBackend(key, cids);
		if (StringUtils.isNotBlank(orderby)) {
			if (orderby.equals(Constants.ProductsOrderby.ORDERBY_PRICE_ASC)) {
				Collections.sort(productList, new Comparator<Product>() {

					public int compare(Product o1, Product o2) {
						return BigDecimalUtil.sub(o1.getPrice().doubleValue(), o2.getPrice().doubleValue()).doubleValue() > 0 ? 1 : -1;
					}

				});
			} else if (orderby.equals(Constants.ProductsOrderby.ORDERBY_PRICE_DESC)) {
				Collections.sort(productList, new Comparator<Product>() {

					public int compare(Product o1, Product o2) {
						return BigDecimalUtil.sub(o2.getPrice().doubleValue(), o1.getPrice().doubleValue()).doubleValue() > 0 ? 1 : -1;
					}

				});
			}
		}
		PageInfo pageInfo = new PageInfo(productList);
		List<ProductListVo> pvos = assembleProductListVo(productList);
		pageInfo.setList(pvos);

		return ServerResponse.createBySuccess(pageInfo);
	}

	public ServerResponse<PageInfo> getProductsByConsumer(String key, Integer categoryId, Integer pagenum, Integer size,
			String orderby,BigDecimal lowPrice,BigDecimal highPrice) {
		if (StringUtils.isBlank(key) && categoryId == null) {
			return ServerResponse.createByError(ResponseCode.ILLEGAL_ARG.getCode(), ResponseCode.ILLEGAL_ARG.getDesc());
		}
		List<Integer> cids = new ArrayList<Integer>();
		if (categoryId != null) {
			Category category = categoryMapper.selectByPrimaryKey(categoryId);
			if (categoryId != 0 && category == null && StringUtils.isBlank(key)) {
				PageHelper.startPage(pagenum, size,true);
				List<ProductListVo> pvos = Lists.newArrayList();
				PageInfo pageInfo = new PageInfo(pvos);
				return ServerResponse.createBySuccess(pageInfo);
			}
			cids = iCategoryService.getAllChildCategory(categoryId).getData();
		}
		if (StringUtils.isNotBlank(key)) {
			key = new StringBuffer().append("%").append(key).append("%").toString();
		}
		PageHelper.startPage(pagenum, size,true);
		List<Product> productList = productMapper.selectByKeyAndCategorys(key, cids,lowPrice,highPrice);
		if (StringUtils.isNotBlank(orderby)) {
			if (orderby.equals(Constants.ProductsOrderby.ORDERBY_PRICE_ASC)) {
				Collections.sort(productList, new Comparator<Product>() {

					public int compare(Product o1, Product o2) {
						return BigDecimalUtil.sub(o1.getPrice().doubleValue(), o2.getPrice().doubleValue())
								.doubleValue() > 0 ? 1 : -1;
					}

				});
			} else if (orderby.equals(Constants.ProductsOrderby.ORDERBY_PRICE_DESC)) {
				Collections.sort(productList, new Comparator<Product>() {

					public int compare(Product o1, Product o2) {
						return BigDecimalUtil.sub(o2.getPrice().doubleValue(), o1.getPrice().doubleValue())
								.doubleValue() > 0 ? 1 : -1;
					}

				});
			}
		}
		PageInfo pageInfo = new PageInfo(productList);
		List<ProductListVo> pvos = assembleProductListVo(productList);
		pageInfo.setList(pvos);

		return ServerResponse.createBySuccess(pageInfo);
	}

	/**
	 * build the detail of product
	 * 
	 * @param product
	 * @return
	 */
	private ProductDetailVo assembleProductDetailVo(ProductWithBLOBs product) {
		ProductDetailVo vo = new ProductDetailVo();
		vo.setProductId(product.getProductId());
		vo.setProductName(product.getProductName());
		vo.setSubtitle(product.getSubtitle());
		vo.setPrice(BigDecimalUtil.format(product.getPrice()));
		vo.setForeground(product.getForeground());
		vo.setSubimages(product.getSubimages());
		vo.setCategoryId(product.getCategoryId());
		vo.setDetail(product.getDetail());
		vo.setBusinessId(product.getBusinessId());
		vo.setProductStatus(product.getProductStatus());
		vo.setStock(product.getStock());
		Category category = categoryMapper.selectByPrimaryKey(vo.getCategoryId());
		if (category == null) {
			vo.setParentCategoryId(0);
		} else {
			vo.setParentCategoryId(category.getParentId());
		}
		vo.setImageHost(PropertiesUtil.getProperty("ftp.server.http.prefix"));
		vo.setCreateTime(DateTimeUtil.dateToStr(product.getCreateTime()));
		vo.setUpdateTime(DateTimeUtil.dateToStr(product.getUpdateTime()));

		return vo;
	}

	private List<ProductListVo> assembleProductListVo(List<Product> products) {
		List<ProductListVo> pvos = Lists.newArrayList();
		for (Product p : products) {
			ProductListVo vo = new ProductListVo();
			vo.setProductId(p.getProductId());
			vo.setCategoryId(p.getCategoryId());
			vo.setProductName(p.getProductName());
			vo.setSubtitle(p.getSubtitle());
			vo.setForeground(p.getForeground());
			vo.setPrice(BigDecimalUtil.format(p.getPrice()));
			vo.setBusinessId(p.getBusinessId());
			vo.setStock(p.getStock());
			vo.setProductStatus(p.getProductStatus());

			vo.setImageHost(PropertiesUtil.getProperty("ftp.server.http.prefix"));

			pvos.add(vo);
		}
		return pvos;
	}
	
	/**
	 * 上传图片
	 * @param files
	 * @return
	 */
	public ServerResponse uplaodFile(Integer userId,String directory,MultipartFile [] files){
		if(files==null ||files.length==0){
			return ServerResponse.createByError(ResponseCode.ILLEGAL_ARG.getCode(), ResponseCode.ILLEGAL_ARG.getDesc());
		}
		String remoteDirecty="img";
		List<File> filesForUpload=Lists.newArrayList();
		List<String> filesName=Lists.newArrayList();
		File fileDirectory=new File(directory);
		if(!fileDirectory.exists()){
			fileDirectory.mkdirs();
		}
		for(int i = 0;i<files.length;i++){
			try {
				String fileDest=String.format(directory + "/pi-%s.png", generateProductImageName(userId,i));
				File file=new File(fileDest);
				files[i].transferTo(file);
				filesName.add(file.getName());
				filesForUpload.add(file);
			} catch (IOException e) {
				logger.error("保存文件失败",e);
				e.printStackTrace();
				return ServerResponse.createByErrorWithMessage("保存文件失败");
			}
		}
		try {
			FTPUtil.uploadFile(remoteDirecty, filesForUpload);
		} catch (Exception e) {
			logger.error("上传文件失败",e);
			e.printStackTrace();
			return ServerResponse.createByErrorWithMessage("上传文件失败");
		}
		return ServerResponse.createBySuccess(filesName);
	}
	
	/**
	 * 生成图片的名字
	 * @param userId
	 * @param index
	 * @return
	 */
	private static String generateProductImageName(Integer userId,int index){
		long currentTime=System.currentTimeMillis();
		StringBuffer name=new StringBuffer();
		name.append(userId).append(currentTime).append(index);
		return name.toString();
	}
	
}
